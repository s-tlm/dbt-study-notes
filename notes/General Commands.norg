* General DBT Commands
  Below is a collection of DBT commands.

** CLI Commands

*** `dbt compile`
    Generates executable SQL from files in the `/models`, `/tests` and `/analyses` directories.
    Compiled SQL is stored in the `/target` directory.

    Compile is useful if you want to:
    ~ Visually inspect the compiled SQL files. Inspect compiled Jinja logic and macros.
    ~ Manually run compiled SQL files.
    ~ Compile analysis files to run. *Note: DBT only compiles analysis files and not run them.*

*** `dbt run`
    Executes compiled SQL against the target database. Models are run in order of dependencies
    and using the materialisations set in the configuration.

*** `dbt source freshness`
    If the DBT project is configured with sources, this command queries all defined source
    tables and determines their /freshness/. Freshness is determined based on the `freshness`
    configuration defined in the `source.yaml` file.
    DBT will exit if a source is deemed stale.

    Examples where freshness is determined for select sources:

    @code bash
    # Snapshot freshness for all Snowplow tables:
    $ dbt source freshness --select source:snowplow

    # Snapshot freshness for a particular source table:
    $ dbt source freshness --select source:snowplow.event
    @end

    When `dbt source freshness` completes, it generates a `JSON` file with the results of the
    tests to `target/sources.json` by default.

*** `dbt test`
    This command runs all the tests defined for the models, sources, snapshots and seeds.
    It expects the models have already been created inside the data warehouse.

    Examples of running different tests:

    @code bash
    # run tests for one_specific_model
    $ dbt test --select one_specific_model

    # run tests for all models in package
    $ dbt test --select some_package.*

    # run only tests defined singularly
    $ dbt test --select test_type:singular

    # run only tests defined generically
    $ dbt test --select test_type:generic

    # run singular tests limited to one_specific_model
    $ dbt test --select one_specific_model,test_type:singular

    # run generic tests limited to one_specific_model
    $ dbt test --select one_specific_model,test_type:generic
    @end

*** `dbt docs generate`
    Generates the automated documentation based on the SQL files in the project.

*** `dbt build`
    This command does the following:
    ~ Run models
    ~ Execute tests
    ~ Snapshot snapshots
    ~ Seed seeds

*** `dbt run-operation`
    Invokes a macro.

    Some examples:

    @code bash
    # Example 1
    $ dbt run-operation grant_select --args '{role: reporter}'
    # Example 2
    $ dbt run-operation clean_stale_models --args '{days: 7, dry_run: True}'
    @end

** Node Selection Syntax

** Graph Set Operators
