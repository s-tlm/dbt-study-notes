* Structuring Projects
  {https://docs.getdbt.com/guides/best-practices/how-we-structure/1-guide-overview}[DBT Guide to Structuring Projects]

  Below are the best-practices for structuring an analytics project as proposed by DBT.
  In essence, it is recommended to structure a project so that data elements have a clear flow.
  Doing so allows users to easily navigate data elements from raw source all the way to becoming business-conformed
  and ready for consumption.

** Staging
   This is where data usually begins its journey.

   - *Folders*. Folder structure is very important. Having a consistent folder structure helps users
     navigate the codebase. Folder structure is also used to interface with DBT via the {:general commands:** node selection syntax}[Node Selection syntax].
   -- *Subdirectories based on the source system*. This is the recommended approach from DBT. Staging files
      should be grouped by the source system they relate to as tables would share similar properties and loading
      methods.
   - *File Names*. Having a consistent naming pattern is crucial in DBT. Files must be unique and correspond to the
     model when selected and created in the data warehouse. DBT recommends to clearly place as much information
     into file names as possible.

   Suggested naming convention:
   - `stg_<source>__<entity>s.sql`: the double underscore helps visualise seperate components in the file name.
     File names are also *plural*.

*** Models
    Models created in the staging layer should only have standard transformations applied. These should only be
    applied on raw datasets from source.
    Examples of acceptable transformations:
    ~ Renaming
    ~ Type casting
    ~ Basic computations
    ~ Categorizing (using conditional logic to group values into buckets or booleans)

    *Staging models should also be materialized as views*. This is because they're not intended to be used as
    artifacts themselves. Typically, this provides the following benefits:
    - Any downstream models referencing staging models will always get the freshest data possible.
    - Avoids wasting space in the data warehouse that are not intended to be queried by consumers.

    *Staging models are the only place we'll use the `source` macro*. Our staging models should have a 1-to-1
    relationship with our source tables. For each source table, there should be an equivalent staging model.

    *The DBT Codegen package can be used to automate the creation of staging models.*
    {https://github.com/dbt-labs/dbt-codegen}[DBT Codegen]

** Intermediate
   After staging, the Intermediate layer is where we begin to various models together.

   - *Folders*. Structured according to business groupings. Examples: Finance, Marketing, Sales etc.

   Suggested naming convention:
   - `int_<entity>s_<verb>s.sql`: Think of transformations as verbs. These make the exact transformations the
     model represents easy to understand.

** Marts

** Rest of the Project
